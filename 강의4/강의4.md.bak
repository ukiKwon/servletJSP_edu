1. 필터
  - 서버 기동시 Filter > Init() 호출
   ㅇ 필터 객체는 서버가 시작할 떄 생성됨
   
  - 이제 할 일?
   ㅇ 등록된 필터가 어떤 페이지에 대해서 적용할 것인지 이제 mapping 해줘야함
  - 동작 순서
   ㅇ 고객 요청 시 -> 필터 init() ...-> 서블릿 service 수행 --> 필터 Init() 역순으로 doFilter 실행  
  
 2. 리스너
  - 특정 서블릿에 대하여 별도의 리스너를 사용하고 싶을 때 ServletContextListener 인터페이스 Implements 하면 됨
   ㅇ 얘도 서벗에서 알아먹을 수 있도록 WEB-INF/web.xml에 등록하면 됨
  - 얘또 서버 기동 시 web.xml읽을 때 객체 생성됨
 
 3. JSP 프로그래밍
  - JSP 는 서블릿이다
  - Servlet을 태그 방식을 이용해서 개발한게 JSP 다
   ㅇ 표현 방법만 다르다, 간단하게 Servlet을 개발하기 위한 개발 방법이다.
  - JSP 컨테이너에서
   ㅇ myAsource.jsp -> myAsource.java -> myAsource.class -> Servlet 컨테이너에서 읽어들여서 실행한다.
  - 크게 2가지
   ㅇ 스크립트 기반 태그
   ㅇ xml 기반 태크
  - <%@ : 파일 정보
  - <%! : 멤버변수/멤버함수 선언
  - <% : service()에서 실행하는 내용
  - <%= : service()에서 out.print로 찍히는 내용
 
 4. JSP 프로그래밍 > 내장객체
  ****** 내장객체는 service() 안에 존재하는 "지역변수"다. 그래서 다른 함수에서 쓰려면, 선언이 필요하다.
  - out
   ㅇ clearBuffer() : out 버퍼를 삭제
   ㅇ flush() : Buffer가 가득 차있지 않아도, 바로 보냄
    * 기본적으로 Buffer가 다 차야 보내기 때문에, 내가 상대한테 보냈는데 상대가 못 받았다고 할 경우, 일단 out.flush()해보면 됨
   ㅇ close() : 자원해제는 꼭 할 것
               
5. JSP 프로그래밍 > XML 방식
 - 스크립트 방식과는 다른 방식
 - 태그 방식 = 표준 액션과 커스텀
  ㅇ 태그 이름이 중첩될 경우? namespace 방식으로 사용
   * <a_dev:tag01> </a_dev:tag01>,, ,,, <b_dev:tag01></b_dev:tag01>
 	※ JSP 주석 : ctr + shift + /
	※ forward 방식
	(1) jsp 내 직접 디스패처 기능 사용
	(2) pageContext 사용
	(3) jsp 표준액션 태그 사용
	
6. EL?
 - EL로 JSP 다 커버 가능하다.
 

                                                 																																																													                        
                                                 																																																													방식                    
                                                 																																																													 직접 디스패처 기능 사용
                                                 																																																													ntext 사용              
                                                 																																																													준액션 태그 사용        
                                                 																																																													                        